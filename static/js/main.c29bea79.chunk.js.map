{"version":3,"sources":["components/Scroll.js","components/Card.js","components/CardList.js","components/SearchBox.js","containers/App.js","serviceWorker.js","index.js"],"names":["Scroll","props","style","overflowY","border","height","children","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","onChange","type","placeholder","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iNAUeA,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAASC,OAAQ,iBAAiBC,OAAQ,UAC7DJ,EAAMK,WCUJC,EAbH,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,GACrB,OACE,yBAAKC,UAAU,uDACZ,yBAAKA,UAAU,aACZ,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,4BAAKF,GACL,2BAAIC,MCaGK,EAjBF,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACE,6BACGA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCFhBW,EATG,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAC7B,OACE,yBAAKX,UAAU,OACb,2BAAOA,UAAU,gCAAgCY,SAAUD,EAAcE,KAAK,SAASC,YAAY,iBC8C5FC,E,kDA1CX,aAAc,IAAD,8BACT,gBAcJC,eAAiB,SAACC,GAEf,EAAKC,SAAS,CAACR,YAAaO,EAAME,OAAOC,SAfxC,EAAKC,MAAQ,CACXjB,OAAQ,GACRM,YAAa,IAJN,E,gEAOS,IAAD,OACjBY,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAC/DA,EAASC,UACVF,MAAK,SAAAG,GAAK,OACT,EAAKR,SAAS,CAACd,OAAQsB,S,+BASpB,IAAD,EACwBC,KAAKN,MAA1BjB,EADH,EACGA,OAAOM,EADV,EACUA,YACRkB,EAAgBxB,EAAOyB,QAAO,SAAAC,GAChC,OAAOA,EAAMjC,KAAKkC,cAAcC,SAAStB,EAAYqB,kBAGzD,OACE,yBAAK/B,UAAU,MACb,2CACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKX,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUZ,OAAQwB,IADpB,U,GAhCMK,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCPNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c29bea79.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div style={{overflowY: 'scroll',border: '5px solid pink',height: '600px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst Card =({name,email,id})=> {\r\n    return (\r\n      <div className='tc bg-light-green dib pa3 br3 ma2 grow bw2 shadow-5'>\r\n         <div className=\"card-body\">\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>                  \r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n                </div>\r\n       </div>\r\n         \r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n   \r\nconst CardList = ({ robots }) => {\r\n    return (\r\n      <div>\r\n        {robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n};\r\n    \r\n    export default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) =>{\r\n    return (\r\n      <div className=\"pa2\">\r\n        <input className='pa3 ba b--green bg-light-blue' onChange={searchChange} type=\"search\" placeholder=\"Robot Name\" />\r\n      </div>\r\n    );\r\n    \r\n    \r\n}\r\nexport default SearchBox;","import React, { Component } from 'react';\r\nimport Scroll from \"../components/Scroll\";\r\nimport CardList from \"../components//CardList\";\r\nimport SearchBox from \"../components//SearchBox\";\r\n\r\n\r\n\r\nclass App extends Component {\r\n  \r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n          robots: [],\r\n          searchfield: \"\"\r\n        };\r\n    }\r\n      componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(response=>\r\n          response.json())\r\n        .then(users=>\r\n          this.setState({robots: users}));\r\n        \r\n      }\r\n\r\n    onSearchChange = (event) => {\r\n        \r\n       this.setState({searchfield: event.target.value})\r\n    }\r\n    \r\n    render(){\r\n        const {robots,searchfield}= this.state;\r\n        const filteredRobots =robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n\r\n        return (\r\n          <div className=\"tc\">\r\n            <h1>RoboFriends</h1>\r\n            <SearchBox searchChange={this.onSearchChange} />\r\n            <Scroll>\r\n              <CardList robots={filteredRobots} />;\r\n            </Scroll>\r\n            \r\n          </div>\r\n        );\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./containers//App\";\nimport * as serviceWorker from './serviceWorker';\n\n\nimport 'tachyons';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}